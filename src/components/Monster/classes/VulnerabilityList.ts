import { IVulnerability, Vulnerability } from "./Vulnerability";

export interface IVulnerabilityList {
    vulnerabilities: IVulnerability[];
    vulnerabilityCount: number;
    names: string;
    addVulnerability(vulnerability: IVulnerability);
    addMultipleVulnerabilities(vulnerabilityNames: string[]);
}

export class VulnerabilityList implements IVulnerabilityList {
    public vulnerabilities: Vulnerability[] = [];

    public get vulnerabilityCount() {
        return this.vulnerabilities.reduce((a, b) => a + b.vulnerabilityCount, 0);
    }

    public get names(): string {
        let desc = "";
        let count = 0;
        for (const res of this.vulnerabilities) {
            if (count > 0) {
                if (res.isClause) {
                    desc += ";";
                } else {
                    desc += ",";
                }
            }
            desc += " ";
            desc += res.name;
            count++;
        }

        return desc;
    }

    public addVulnerability(vulnerability: Vulnerability) {
        this.vulnerabilities.push(vulnerability);
    }

    public addMultipleVulnerabilities(vulnerabilityNames: string[]) {
        for (const vul of vulnerabilityNames) {
            this.vulnerabilities.push(new Vulnerability(vul, 1));
        }
    }

}
